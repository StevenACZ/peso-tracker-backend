generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  goals     Goal[]
  photos    Photo[]
  weights   Weight[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Weight {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  weight    Decimal  @db.Decimal(5, 2)
  date      DateTime @db.Date
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  photos    Photo?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("weights")
}

model Goal {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  targetWeight Decimal  @map("target_weight") @db.Decimal(5, 2)
  targetDate   DateTime @map("target_date") @db.Date
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Photo {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  weightId     Int      @unique @map("weight_id")
  thumbnailUrl String   @map("thumbnail_url")
  mediumUrl    String   @map("medium_url")
  fullUrl      String   @map("full_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight       Weight   @relation(fields: [weightId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  code      String   @unique  // Changed from token to code (6 digits)
  expiresAt DateTime @map("expires_at")
  attempts  Int      @default(0)  // Track failed attempts
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}
