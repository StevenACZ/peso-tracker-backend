generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  weights Weight[]
  goals   Goal[]
  photos  Photo[]

  @@map("users")
}

model Weight {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  weight    Decimal  @db.Decimal(5, 2)
  date      DateTime @db.Date
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos Photo[]

  @@unique([userId, date])
  @@map("weights")
}

model Goal {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  targetWeight     Decimal  @map("target_weight") @db.Decimal(5, 2)
  targetDate       DateTime @map("target_date") @db.Date
  type             String   @default("main")
  isAutoGenerated  Boolean  @default(false) @map("is_auto_generated")
  parentGoalId     Int?     @map("parent_goal_id")
  milestoneNumber  Int?     @map("milestone_number")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentGoal Goal? @relation("GoalHierarchy", fields: [parentGoalId], references: [id])
  subGoals   Goal[] @relation("GoalHierarchy")

  @@map("goals")
}

model Photo {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  weightId    Int      @unique @map("weight_id")
  notes       String?
  thumbnailUrl String  @map("thumbnail_url")
  mediumUrl   String   @map("medium_url")
  fullUrl     String   @map("full_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight Weight @relation(fields: [weightId], references: [id], onDelete: Cascade)

  @@map("photos")
}