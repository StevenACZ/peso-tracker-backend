import { Injectable, NotFoundException, ForbiddenException, BadRequestException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateGoalDto } from './dto/create-goal.dto';
import { UpdateGoalDto } from './dto/update-goal.dto';

@Injectable()
export class GoalsService {
  constructor(private prisma: PrismaService) {}

  async create(userId: number, createGoalDto: CreateGoalDto) {
    const { targetWeight, targetDate, type, parentGoalId, milestoneNumber } = createGoalDto;

    // Validate target date is in the future
    const targetDateObj = new Date(targetDate);
    if (targetDateObj <= new Date()) {
      throw new BadRequestException('La fecha objetivo debe ser en el futuro');
    }

    // If it's a milestone goal, validate parent goal exists and belongs to user
    if (type === 'milestone' && parentGoalId) {
      const parentGoal = await this.prisma.goal.findUnique({
        where: { id: parentGoalId },
      });

      if (!parentGoal || parentGoal.userId !== userId) {
        throw new BadRequestException('Meta padre no válida');
      }
    }

    const goal = await this.prisma.goal.create({
      data: {
        userId,
        targetWeight,
        targetDate: targetDateObj,
        type: type || 'main',
        parentGoalId,
        milestoneNumber,
        isAutoGenerated: false,
      },
      include: {
        parentGoal: true,
        subGoals: true,
      },
    });

    return goal;
  }

  async findAll(userId: number) {
    const goals = await this.prisma.goal.findMany({
      where: { userId },
      orderBy: { createdAt: 'desc' },
      include: {
        parentGoal: true,
        subGoals: {
          orderBy: { milestoneNumber: 'asc' },
        },
      },
    });

    return goals;
  }

  async findOne(id: number, userId: number) {
    const goal = await this.prisma.goal.findUnique({
      where: { id },
      include: {
        parentGoal: true,
        subGoals: {
          orderBy: { milestoneNumber: 'asc' },
        },
      },
    });

    if (!goal) {
      throw new NotFoundException('Meta no encontrada');
    }

    if (goal.userId !== userId) {
      throw new ForbiddenException('No tienes permisos para acceder a esta meta');
    }

    return goal;
  }

  async update(id: number, userId: number, updateGoalDto: UpdateGoalDto) {
    const existingGoal = await this.findOne(id, userId);

    // Validate target date is in the future if provided
    if (updateGoalDto.targetDate) {
      const targetDateObj = new Date(updateGoalDto.targetDate);
      if (targetDateObj <= new Date()) {
        throw new BadRequestException('La fecha objetivo debe ser en el futuro');
      }
    }

    // If updating parent goal, validate it exists and belongs to user
    if (updateGoalDto.parentGoalId) {
      const parentGoal = await this.prisma.goal.findUnique({
        where: { id: updateGoalDto.parentGoalId },
      });

      if (!parentGoal || parentGoal.userId !== userId) {
        throw new BadRequestException('Meta padre no válida');
      }
    }

    const updatedGoal = await this.prisma.goal.update({
      where: { id },
      data: {
        ...updateGoalDto,
        targetDate: updateGoalDto.targetDate ? new Date(updateGoalDto.targetDate) : undefined,
      },
      include: {
        parentGoal: true,
        subGoals: {
          orderBy: { milestoneNumber: 'asc' },
        },
      },
    });

    return updatedGoal;
  }

  async remove(id: number, userId: number) {
    const existingGoal = await this.findOne(id, userId);

    // Check if goal has sub-goals
    const subGoalsCount = await this.prisma.goal.count({
      where: { parentGoalId: id },
    });

    if (subGoalsCount > 0) {
      throw new BadRequestException('No se puede eliminar una meta que tiene sub-metas');
    }

    await this.prisma.goal.delete({
      where: { id },
    });

    return { message: 'Meta eliminada exitosamente' };
  }
}